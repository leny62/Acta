.footer{
    position: fixed;
    background-color: #FFFFFF;
    color: white;
    bottom: 0;
    padding-top: 5px; 
    padding-bottom: 5px;
    width: 105%;
    display: inline-block;
    margin-left: -10%;
}

.text-center{ 
   text-align: center;
   margin-left: auto;
   margin-right: auto;
   font-family: ocr-a-std,monospace;
}

.button-style{
    width: 60%;
    font-size: 20px;
    padding: 10px 10px;
    /* height: 2.4rem; */
    background: #3FB0AC;
    color: white;
    cursor: pointer;
    align-items: center;
    text-decoration: none;
    transition-duration: 0.4s;
    box-shadow: 0px 3px 6px #3FB0AC;
    border-radius: 10px;
    opacity: 1;
}
.button-style:hover{
    text-decoration: none;
    color:white;
    background-color: #173E43;
    box-shadow: 0px 3px 6px #173E43;
}
.center{
    text-align: center;
    align-items: center;
    margin-left: 20%;
    margin-right: auto;
}

#news-icon{
    /* margin-top:1%; */
    width:40px;
    height: 30px;
}

#plus-icon{
    width:35px;
    height: 40px;
}

#leaves-icon{
    width:45px;
    height: 40px;
}

/* Columns  */
/* display: grid is changing the behavior of the .hero element to be a grid container.
 That means the elements inside .hero are now grid items. */
 .hero{ 
    /* background: url('./pages/landing-page/img/background1.png'); */
    /* margin-top: 4%; */
    background-size: cover;
    padding: 1rem 1rem;
    /* Grid styles */
    display: grid;
    text-align: center;
    align-items: center;
     /* this is the same as grid-template-rows: 300px 300px; it will create 2 columns with minmax() calculating 
    automatically the size of the track, based on the width of the viewport,
     */
     /* auto-fit keyword allows us to wrap our columns into rows when thereâ€™s not enough space in our viewport to fit the 240px minimum value without overflowing the content. */
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
}